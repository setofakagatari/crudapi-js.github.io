{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["urlPost","urlDelete","urlGet","urlPut","Appp","state","data","modalInsertar","modalEliminar","form","id","namee","usernamee","tipoModal","peticionGet","axios","get","then","response","setState","catch","error","console","log","message","peticionPost","a","post","peticionPut","put","peticionDelete","delete","seleccionarUser","user","handleChange","e","persist","target","value","this","className","onClick","map","icon","faEdit","faTrashAlt","Modal","isOpen","ModalHeader","style","display","float","ModalBody","htmlFor","type","name","readOnly","onChange","length","ModalFooter","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.632c5abd.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './App.css';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faEdit, faTrashAlt} from '@fortawesome/free-solid-svg-icons';\nimport {Modal, ModalBody, ModalFooter, ModalHeader} from 'reactstrap';\n\nconst urlPost=\"https://murmuring-wave-05935.herokuapp.com/insert.php\";\nconst urlDelete=\"https://murmuring-wave-05935.herokuapp.com/delete.php\";\nconst urlGet=\"https://murmuring-wave-05935.herokuapp.com/read.php\";\nconst urlPut=\"https://murmuring-wave-05935.herokuapp.com/update.php\";\n\n\n\n\nclass Appp extends Component{\n  \n\n  state={\n    data:[],\n    modalInsertar:false,\n    modalEliminar:false,\n    form:{\n      id:'',\n      namee:'',\n      usernamee:'',\n      tipoModal:'',\n    }\n  }\n\n  peticionGet=()=>{\n    axios.get(urlGet).then(response=>{\n      this.setState({data:response.data});\n    }).catch(error=>{\n      console.log(error.message);\n    })\n  }\n  peticionPost= async ()=>{\n    delete this.state.form.id;\n    await axios.post(urlPost,this.state.form).then(response=>{\n      this.modalInsertar();\n      this.peticionGet();\n    }).catch(error=>{\n      console.log(error.message);\n    })\n  }\n  peticionPut=()=>{\n    axios.put(urlPut+this.state.form.id, this.state.form).then(response=>{\n      this.modalInsertar();\n      this.peticionGet();\n    })\n  }\n  peticionDelete=()=>{\n    axios.delete(urlDelete+this.state.form.id).then(response=>{\n      this.setState({modalEliminar:false});\n      this.peticionGet();\n    })\n  }\n  modalInsertar=()=>{\n    this.setState({modalInsertar:!this.state.modalInsertar});\n  }\n  seleccionarUser=(user)=>{\n    this.setState({\n      tipoModal: 'actualizar',\n      form:{\n        id: user.id,\n        namee: user.namee,\n        usernamee: user.usernamee\n      }\n    })\n  }\n  handleChange=async e=>{\n    e.persist();\n    await this.setState({\n      form:{\n        ...this.state.form,\n        [e.target.namee]: e.target.value\n      }\n    });\n    console.log(this.state.form);\n  }\n  \n\n  componentDidMount(){\n    this.peticionGet();\n  }\n\n  render(){\n    const {form}=this.state;\n  return (\n    <div className=\"App\">\n      <br/>\n      <button className=\"btn btn-success\" onClick={()=>{this.setState({form: null, tipoModal:'insertar'}); this.modalInsertar()}}>agregar usuario</button>\n      <br/><br/>\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th>id</th>\n            <th>namee</th>\n            <th>usernamee</th>\n            <th>acciones</th>\n          </tr>\n        </thead>\n        <tbody>\n          {this.state.data.map(user=>{\n            return(\n              <tr>\n                <td>{user.id}</td>\n                <td>{user.namee}</td>\n                <td>{user.usernamee}</td>\n                <td>\n                  <button className=\"btn btn-primary\" onClick={()=>{this.seleccionarUser(user); this.modalInsertar()}}><FontAwesomeIcon icon={faEdit}/></button>\n                  {'   '}\n                  <button className=\"btn btn-danger\" onClick={()=>{this.seleccionarUser(user); this.setState({modalEliminar:true})}}><FontAwesomeIcon icon={faTrashAlt}/></button>\n                </td>\n              </tr>\n\n            )\n          })}\n        </tbody>\n      </table>\n\n\n      <Modal isOpen={this.state.modalInsertar}>\n        <ModalHeader style={{display:'block'}}>\n          <span style={{float:'right'}}>x</span>\n        </ModalHeader>\n      \n      <ModalBody>\n        <div className=\"form-group\">\n          <label htmlFor='id'>id</label>\n          <input className='form-control' type='text' name='id' id='id' readOnly onChange={this.handleChange} value={form ? form.id: this.state.data.length+1}/>\n          <br/>\n          <label htmlFor='namee'>namee</label>\n          <input className='form-control' type='text' name='namee' id='namee' onChange={this.handleChange} value={form?form.namee : ''}/>\n          <br/>\n          <label htmlFor='usernamee'>usernamee</label>\n          <input className='form-control' type='text' name='usernamee' id='usernamee' onChange={this.handleChange} value={form?form.usernamee: ''}/>\n          <br/>\n\n        </div>\n      </ModalBody>\n      <ModalFooter>\n        {this.state.tipoModal=='insertar'?\n          <button className=\"btn btn-success\" onClick={()=>this.peticionPost()}>insertar</button>:\n          <button className=\"btn btn-primary\" onClick={()=>this.peticionPut()}>actualizar</button>\n\n        }\n          <button className=\"btn btn-danger\" onClick={()=>this.modalInsertar()}>cancelar</button>\n      </ModalFooter>\n      </Modal>\n\n      <Modal isOpen={this.state.modalEliminar}>\n        <ModalBody>\n           <p>esta seguro de que quiere eliminar {form && form.namee}</p>\n        </ModalBody>\n        <ModalFooter>\n          <button className=\"btn btn-danger\" onClick={()=>this.peticionDelete()}>si</button>\n          <button className=\"btn btn-secundary\" onClick={()=>this.setState({modalEliminar:false})}>no</button>\n        </ModalFooter>\n      </Modal>\n    </div>\n  );\n}\n}\n\nexport default Appp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}